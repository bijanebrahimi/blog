<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Routines Excluded - Gist</title><link href="http://bijanebrahimi.github.io/blog/" rel="alternate"></link><link href="http://bijanebrahimi.github.io/blog/feeds/gist.atom.xml" rel="self"></link><id>http://bijanebrahimi.github.io/blog/</id><updated>2017-02-20T20:12:00+03:30</updated><entry><title>Graphviz in markdown</title><link href="http://bijanebrahimi.github.io/blog/graphviz-in-markdown.html" rel="alternate"></link><published>2017-02-20T20:12:00+03:30</published><updated>2017-02-20T20:12:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2017-02-20:/blog/graphviz-in-markdown.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;There is a good tutorial on &lt;a href="https://github.com/TLmaK0/gravizo"&gt;How to include graphviz graphs in github&lt;/a&gt;. Basically it introduced me to an online web service which takes graphviz scripts as part of a url query string and renders it into an image type. It is a very good idea for many reasons â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;There is a good tutorial on &lt;a href="https://github.com/TLmaK0/gravizo"&gt;How to include graphviz graphs in github&lt;/a&gt;. Basically it introduced me to an online web service which takes graphviz scripts as part of a url query string and renders it into an image type. It is a very good idea for many reasons. One, the graph is still plain text and searchable inside source files, Second, editing an already drawn graph inside a wiki page is now very easy and the dot files are pretty easy to write.&lt;/p&gt;
&lt;h1&gt;Problem?&lt;/h1&gt;
&lt;p&gt;So, what's the problem? As I said, It was a good idea (even our Project Manager liked it since we're about to move our project's knowledge base into a local Gitlab's server, way better than using &lt;a href="http://asciiflow.com"&gt;asciiflow.com&lt;/a&gt;). The Only problem was that It was an unnecessary dependency to use an remote web-service and I thought why not I build our own local version of it? So, I did.&lt;/p&gt;
&lt;h1&gt;Requirments&lt;/h1&gt;
&lt;p&gt;Since we already had an omnibus version of gitlab running on a debian server, I tried to write a simple php-script serving on the already running bundle version of nginx in gitlab omnibus package. The following is the work around. If you have a similiar but not quiet the same situation, you may consider changing the following steps as fits your needs so I try to explain as much as needed.&lt;/p&gt;
&lt;h1&gt;Gitlab's Nginx, a proxy to local Apache&lt;/h1&gt;
&lt;p&gt;Since I knew php way better than ruby (still I'm not a php developer anymore), I deided to write my graphviz web-service in php language, so I installed apache (running on port 8090) and php and no to forget, the graphviz command tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-get install apache2 libapache2-mod-php5 graphviz
$ editor /etc/apache2/ports.conf
Listen 8090
$ editor /etc/apache2/sites-enabled/000-default.conf
&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:8090&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ServerAdmin webmaster@localhost
  DocumentRoot /var/www/webtools.company_domain.net
  ErrorLog &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/error.log
  CustomLog &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/access.log combined
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and set the gitlab's nginx to work as a proxy to my apache web-server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ editor /var/opt/gitlab/nginx/conf/webtools.company_domain.net
server &lt;span class="o"&gt;{&lt;/span&gt;
  listen *:80&lt;span class="p"&gt;;&lt;/span&gt;
  server_name webtools.company_domain.net&lt;span class="p"&gt;;&lt;/span&gt;
  access_log /var/log/webtools.company_domain.net.access.log&lt;span class="p"&gt;;&lt;/span&gt;
  error_log /var/log/webtools.company_domain.net.error.log&lt;span class="p"&gt;;&lt;/span&gt;
  location / &lt;span class="o"&gt;{&lt;/span&gt;
    proxy_pass http://127.0.0.1:8090&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
$ nano /etc/gitlab/gitlab.rb
nginx&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;custom_nginx_config&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;include /var/opt/gitlab/nginx/conf/webtools.company_domain.net;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we shoould reconfigure gitlab to create the new nginx configuration file from our changes in &lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gitlab-ctl reconfigure
$ gitlab-ctl restart nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the only missing pieces is the actual php script. Since it's a prototype version of our graphviz web service, we only render svg formats:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;nano&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="err"&gt;/www/webtools.company_domain.net/graphviz/index.php&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span class="nv"&gt;$dot_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rawurldecode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;QUERY_STRING&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="nv"&gt;$dot_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tempnam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dot_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dot_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$dot_content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Content-type: image/svg+xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dot -Tsvg &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$dot_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$dot_file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, the following markdown script should nicely render as a svg image in our rendered markdown wiki pages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Alt&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//webtools.company_domain.net/graphviz/?&lt;/span&gt;
&lt;span class="n"&gt;digraph&lt;/span&gt; &lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;aize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;4,4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;parse&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dotted&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cleanup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;make_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;make_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;edge&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100 times&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;make_string&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;make a string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.7 .3 1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hope it helps other people as well :-)&lt;/p&gt;</content><category term="gitlab"></category><category term="wiki"></category><category term="graphviz"></category><category term="debian"></category><category term="omnibus"></category><category term="apache"></category><category term="nginx"></category><category term="php"></category><category term="dot"></category><category term="svg"></category></entry><entry><title>GCC Cross-Compiler</title><link href="http://bijanebrahimi.github.io/blog/gcc-cross-compiler.html" rel="alternate"></link><published>2017-02-17T12:04:00+03:30</published><updated>2017-02-17T12:04:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2017-02-17:/blog/gcc-cross-compiler.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A cross compiler is a compiler capable of creating executable code for a platform other than the one on which the compiler is running. For example, a compiler that runs on a Windows 7 PC but generates code that runs on Android smartphone is a cross compiler.&lt;/p&gt;
&lt;p&gt;--&lt;a href="https://en.wikipedia.org/wiki/Crosscompiler"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;A cross compiler is a compiler capable of creating executable code for a platform other than the one on which the compiler is running. For example, a compiler that runs on a Windows 7 PC but generates code that runs on Android smartphone is a cross compiler.&lt;/p&gt;
&lt;p&gt;--&lt;a href="https://en.wikipedia.org/wiki/Crosscompiler"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Before we continue, there issome definitions we need to decide.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt;: The machine you are building on which in our case, we're building our cross-compiler on a linux machine (&lt;code&gt;--host&lt;/code&gt; option).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Host&lt;/strong&gt;: The machine that you are building for and again, it's a linux machine we're trying to build our binaries (&lt;code&gt;--host&lt;/code&gt; option).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target&lt;/strong&gt;: The machine that GCC will produce code for which is a freebsd machine (&lt;code&gt;--target&lt;/code&gt; option).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To decide the values of the above configuration, simply run &lt;code&gt;gdb --version&lt;/code&gt; on the native machine. for a linux machine it's &lt;code&gt;x86_64-pc-linux-gnu&lt;/code&gt; and for my target machine it's &lt;code&gt;amd64-marcel-freebsd9.2&lt;/code&gt;. Since we're building and running our cross-compile on the same machine (&lt;code&gt;x86_64-pc-linux-gnu&lt;/code&gt;), we don't need to specify the build and the host configuration which gcc will pick automatically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64-marcel-freebsd9.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And since, we don't wan to mix our cross-compile toolchains with our native binaries, we install our cross-compiler toolchains in the &lt;code&gt;/usr/cross-build&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/cross-build
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;TARGET_PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX/$TARGET
$ &lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$PATH:$PREFIX/bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One more important note before start compiling is that we need the head-files and libraries of the target machine. So we should copy &lt;code&gt;/lib&lt;/code&gt; and &lt;code&gt;/include&lt;/code&gt; directories from our freebsd machine to our cross-build directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="n"&gt;mkdir&lt;/span&gt; -&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;$TARGET_PREFIX&lt;/span&gt;{,&lt;span class="sr"&gt;/lib,/&lt;/span&gt;&lt;span class="n"&gt;include&lt;/span&gt;}
&lt;span class="c c-Singleline"&gt;# copy /lib and /include directories from our freebsd machine in our target $TARGET_PREFIX directory.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GCC requires that a compiled copy of binutils be available for each targeted platform. So we need to download the source code of binutils and compile it for the freebsd machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir -p build-binutils
$ wget https://ftp.gnu.org/gnu/binutils/binutils-2.27.tar.gz
$ tar zxvf binutils-2.27.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build-binutils
$ ../binutils-2.27/configure --target&lt;span class="o"&gt;=&lt;/span&gt;$TARGET --prefix&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX -v
$ make -j 4
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GCC also depends on the following components:
&lt;em&gt; GMP: GNU Multiple Precision Arithmetic Library
&lt;/em&gt; MPFR: GNU Multiple-precision floating-point rounding library
* MPC: GNU Multiple-precision C library&lt;/p&gt;
&lt;p&gt;To build our cross-compiler, we need to compile these dependencies but since these dependencies should produce code for our target machine, we need to build them for the host option set to our tagret (&lt;code&gt;--host=amd64-marcel-freebsd9.2&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir build-gmp
$ wget https://ftp.gnu.org/gnu/gmp/gmp-6.1.1.tar.xz
$ tar xvf gmp-6.1.1.tar.xz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build-gmp
$ ../gmp-6.1.1/configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --enable-shared --enable-static --enable-mpbsd --enable-fft --enable-cxx --host&lt;span class="o"&gt;=&lt;/span&gt;$TARGET
$ make -j 4
$ sudo make install
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..

$ mkdir build-mpfr
$ wget https://ftp.gnu.org/gnu/mpfr/mpfr-3.1.5.tar.xz
$ tar xvf mpfr-3.1.5.tar.xz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build-mpfr
$ ../mpfr-3.1.5/configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX  --with-gnu-ld --with-gmp&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --enable-static --enable-shared --host&lt;span class="o"&gt;=&lt;/span&gt;$TARGET
$ make -j 4
$ sudo make install
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..

$ mkdir build-mpci
$ wget https://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz
$ tar zxvf mpc-1.0.3.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build-mpc
$ ../mpc-1.0.3/configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --with-gnu-ld --with-gmp&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --with-mpfr&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --enable-static --enable-shared --host&lt;span class="o"&gt;=&lt;/span&gt;$TARGET
$ make -j 4
$ sudo make install
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, to compile gcc we need to specify where to look for it's dependencies above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir build-gcc
$ wget https://ftp.gnu.org/gnu/gcc/gcc-6.2.0/gcc-6.2.0.tar.gz
$ tar zxvf gcc-6.2.0.tar.gz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; build-gcc
$ ../gcc-6.2.0/configure --without-headers --with-gnu-as --with-gnu-ld --enable-languages&lt;span class="o"&gt;=&lt;/span&gt;c,c++ --disable-nls --enable-libssp --enable-gold --enable-ld --target&lt;span class="o"&gt;=&lt;/span&gt;$TARGET --prefix&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --with-gmp&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --with-mpc&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --with-mpfr&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --disable-libgomp
$ &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX/lib make -j 4
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we should have our own cross-compiler's toolchain in &lt;code&gt;/usr/cross-build/bin&lt;/code&gt; directory. To use it we should include it in our &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;export PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="x"&gt;/bin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To test our own cross-compiler, we simply run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcc main.c -o helloworld-linux
$ file helloword-linux
main: ELF 64-bit LSB executable, x86-64, version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;SYSV&lt;span class="o"&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, &lt;span class="k"&gt;for&lt;/span&gt; GNU/Linux 2.6.32, BuildID&lt;span class="o"&gt;[&lt;/span&gt;sha1&lt;span class="o"&gt;]=&lt;/span&gt;ca5ba57ac722ef8521d50ee8ecbbdca4b44a76e1, not stripped
$ &lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX/lib amd64-marcel-freebsd9.2-gcc helloworld.c -o helloworld-freebsd
$ file helloworld-freebsd
main: ELF 64-bit LSB executable, x86-64, version &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;FreeBSD&lt;span class="o"&gt;)&lt;/span&gt;, dynamically linked, interpreter /libexec/ld-elf.so.1, &lt;span class="k"&gt;for&lt;/span&gt; FreeBSD 9.2, not stripped
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you need a cross-compile version of gdb, simply compile the gdb for the target machine like above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://ftp.gnu.org/gnu/gdb/gdb-7.11.tar.xz
$ tar xvf gdb-7.11.tar.xz
$ ../gdb-7.11.1/configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;$PREFIX --target&lt;span class="o"&gt;=&lt;/span&gt;$TARGET
$ make -j 4
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see the whole compile process in my &lt;a href="https://gist.github.com/bijanebrahimi/62596745808f8667c40ff91b07d9e7b8"&gt;github gist&lt;/a&gt;.&lt;/p&gt;</content><category term="gist"></category><category term="gcc"></category><category term="cross-compiler"></category><category term="freebsd"></category><category term="linux"></category><category term="compiler"></category></entry><entry><title>A dropdown Tiling Terminal for i3-wm</title><link href="http://bijanebrahimi.github.io/blog/a-dropdown-tiling-terminal-for-i3-wm.html" rel="alternate"></link><published>2016-02-27T14:27:00+03:30</published><updated>2016-02-27T14:27:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2016-02-27:/blog/a-dropdown-tiling-terminal-for-i3-wm.html</id><summary type="html">&lt;p&gt;&lt;a href="http://i3wm.org/docs/userguide.html#_scratchpad"&gt;Scratchpad&lt;/a&gt; is one of the
coolest, and unique features in &lt;a href="http://i3wm.org"&gt;i3&lt;/a&gt;. Scratchpad is basically a
hidden workspace that you can send your programs into it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no way to open that workspace. Instead, when using &lt;code&gt;scratchpad show&lt;/code&gt;,
the window will be shown again, as a floating window, centered on â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://i3wm.org/docs/userguide.html#_scratchpad"&gt;Scratchpad&lt;/a&gt; is one of the
coolest, and unique features in &lt;a href="http://i3wm.org"&gt;i3&lt;/a&gt;. Scratchpad is basically a
hidden workspace that you can send your programs into it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no way to open that workspace. Instead, when using &lt;code&gt;scratchpad show&lt;/code&gt;,
the window will be shown again, as a floating window, centered on your current
workspace&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using scratchpad, we can turn any terminal into a drop-down terminal. I'm using &lt;a href="http://www.tenshu.net/p/terminator.html"&gt;terminator&lt;/a&gt; which supports tiling (and more)
and &lt;code&gt;F1&lt;/code&gt; key as hot key to toggle terminator since I have no other use for formally
known help button key on linux.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Add this to your i3 config (~/.config/i3/config) and restart i3 (Super+Shift+R)
exec --no-startup-id &amp;quot;terminator -m&amp;quot;
for_window [class=&amp;quot;Terminator&amp;quot; title=&amp;quot;^((?!Terminator Preferences).)*$&amp;quot;] move scratchpad, move position 0 0, resize set 1366 768;
bindsym F1 [class=&amp;quot;Terminator&amp;quot;] scratchpad show;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also view the changes via &lt;a href="https://gist.github.com/bijanebrahimi/6641e8022dffb2e6a5dd"&gt;Github Gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: It's possible to send other programs into scratchpad workspace, and
toggle them using different key bindings. The trick is to exclude &lt;strong&gt;Terminator&lt;/strong&gt;
which is also in Scratchpad from showing. for example, Using the code below we
can simply send any active programs into Scratchpad using &lt;code&gt;Super+Shift+F1&lt;/code&gt; key
and retrieve them one by one by hitting &lt;code&gt;Super+F1&lt;/code&gt; and only by pressing &lt;code&gt;F1&lt;/code&gt; we
can toggle &lt;strong&gt;Terminator&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;bindsym &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;mod&lt;/span&gt;&lt;span class="x"&gt;+Shift+F1 move container to scratchpad&lt;/span&gt;
&lt;span class="x"&gt;bindsym &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;mod&lt;/span&gt;&lt;span class="x"&gt;+F1 [class=&amp;quot;^((?!Terminator).)*&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;] scratchpad show&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="terminal"></category><category term="terminator"></category><category term="i3"></category><category term="scratchpad"></category></entry></feed>