<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Routines Excluded - Git</title><link href="http://bijanebrahimi.github.io/blog/" rel="alternate"></link><link href="http://bijanebrahimi.github.io/blog/feeds/git.atom.xml" rel="self"></link><id>http://bijanebrahimi.github.io/blog/</id><updated>2017-02-06T12:22:00+03:30</updated><entry><title>Git Submodules</title><link href="http://bijanebrahimi.github.io/blog/git-submodules.html" rel="alternate"></link><published>2017-02-06T12:22:00+03:30</published><updated>2017-02-06T12:22:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2017-02-06:/blog/git-submodules.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;There are many good articles and blog posts on the Interenet describing how to migrate from svn to git repository. There are a lot of advantages to migrate to git, (&lt;a href="nvie.com/posts/a-successful-git-branching-model"&gt;git-flow&lt;/a&gt; to metion one) but there are also a few draw-backs. For example svn supports &lt;a href="http://svnbook.red-bean.com/en/1.7/svn.serverconfig.pathbasedauthz.html"&gt;Path-Based Authorization&lt;/a&gt; meaning great â€¦&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;There are many good articles and blog posts on the Interenet describing how to migrate from svn to git repository. There are a lot of advantages to migrate to git, (&lt;a href="nvie.com/posts/a-successful-git-branching-model"&gt;git-flow&lt;/a&gt; to metion one) but there are also a few draw-backs. For example svn supports &lt;a href="http://svnbook.red-bean.com/en/1.7/svn.serverconfig.pathbasedauthz.html"&gt;Path-Based Authorization&lt;/a&gt; meaning great control over who sees what parts of the project. Unfortunately git does not provide such mechanism meaning to overcome this task, we should split such files or directories into separate git repositories to restrict access per project and yet keep the project as a whole. In this post I explain how to use git submdules to do that.&lt;/p&gt;
&lt;h1&gt;Git-Flow using submodules&lt;/h1&gt;
&lt;p&gt;Imagine the following scenario in which we have a shared library named &lt;strong&gt;lib-shared&lt;/strong&gt; and two projects named &lt;strong&gt;protocol-x&lt;/strong&gt; and &lt;strong&gt;shell-y&lt;/strong&gt; which different developers have access to one of them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find . -type d
./libs/lib-shared
./routing/protocol-x
./cli/shell-y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we're going to do is to create a separate git repository for each project (as sub-projects):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir lib-shared
$ &lt;span class="nb"&gt;cd&lt;/span&gt; lib-shared
$ git init
$ touch .gitignore
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;added .gitignore&amp;quot;&lt;/span&gt;
$ git remote add origin git@debian:root/lib-shared.git
$ git tag -a v0.1 -m v0.1
$ git push origin --all
$ git push --tags
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
$ mkdir protocol-x
$ &lt;span class="nb"&gt;cd&lt;/span&gt; protocol-x
$ git init
$ touch .gitignore
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;added .gitignore&amp;quot;&lt;/span&gt;
$ git remote add origin git@debian:root/protocol-x.git
$ git tag -a v0.1 -m v0.1
$ git push origin --all
$ git push --tags
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
$ mkdir shell-y
$ &lt;span class="nb"&gt;cd&lt;/span&gt; shell-y
$ git init
$ touch .gitignore
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;added .gitignore&amp;quot;&lt;/span&gt;
$ git remote add origin git@debian:root/shell-y.git
$ git tag -a v0.1 -m v0.1
$ git push origin --all
$ git push --tags
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we create another project (super-project) containing these projects. To do that, we should add above sub-projects as submodules. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/
$ mkdir super-project
$ &lt;span class="nb"&gt;cd&lt;/span&gt; super-project
$ git init
$ git remote add origin git@debian:root/super-project.git
$ git submodule add -b master --name lib-shared git@debian:root/lib-shared libs/lib-shared
$ git submodule add -b master --name protocol-x git@debian:root/protocol-x protocols/protocol-x
$ git submodule add -b master --name shell-y git@debian:root/shell-y cli/shell-y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;git status&lt;/code&gt; we can see that git created a file named &lt;code&gt;.gitmodules&lt;/code&gt; which keeps a list of our current submodules. This file should be a part of source code and it'll help other people cloning this super-project to know which submodules they should also get using &lt;code&gt;git submodule init&lt;/code&gt; (if they have permission ofc). Also Git sees these sub-projects as files instead of directories. This is how git sees submodules. Each submodule points to a git commit SHA-1 which in our case is the latest commit in master branch of each-subproject. You can confirm this by running &lt;code&gt;git diff --staged&lt;/code&gt; command. More interestingly, we can see which version of submodules out super-project is following (before committing):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule status
 fa75a2c38ed4b80f1c42e4434fd3d43e230605ba cli/shell-y &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
 9f0dd01bea1ec7f719bf17e2ff2018dc64fbe335 libs/lib-shared &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
 a2b7c92292a6b47a5ece5feea9e3390879d49d89 protocols/protocol-x &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can commit the changes in our super-project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -m &lt;span class="s2"&gt;&amp;quot;added libshared, protocol-x and shell-y sub-projects&amp;quot;&lt;/span&gt;
$ git tag -a v0.1 -m &lt;span class="s2"&gt;&amp;quot;v0.1&amp;quot;&lt;/span&gt;
$ git push origin --all
$ git push --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/blog/assets/images/git_submodules_diagram_01.svg"&gt;&lt;/p&gt;
&lt;p&gt;Now to follow our git-flow, we need to fork a new branch named &lt;strong&gt;dev&lt;/strong&gt; from master branch. What we should do  first is to create a dev branch in all of our sub-projects using &lt;code&gt;git submodule foreach&lt;/code&gt; which executes given commands in each of our (initialized) submodules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/projects/super-project
$ git checkout -b dev master
$ git submodule foreach &lt;span class="s1"&gt;&amp;#39;git pull origin master; git checkout -b dev master; $ $ git push origin dev&amp;#39;&lt;/span&gt;
$ sed -i&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/branch = master/branch = dev/g&amp;#39;&lt;/span&gt; .gitmodules
$ git add .gitmodules
$ git commit -m &lt;span class="s2"&gt;&amp;quot;forked dev branch&amp;quot;&lt;/span&gt;
$ git push origin dev
$ git tag -a v0.1-dev -m v0.1-dev
$ git push origin --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/blog/assets/images/git_submodules_diagram_02.svg"&gt;&lt;/p&gt;
&lt;p&gt;Now it's time for our developers to clone the super project and changes some code. our developer &lt;strong&gt;kevin&lt;/strong&gt; is the maintainer of the shell-y and only have access to our shared library beside his project so he should avoid trying to get protocol-x project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make /home/kevin/projects/kevin-project
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/kevin/projects/kevin-project
$ git init
$ git remote add origin git@debian:root/super-project.git
$ git fetch origin
$ git checkout -b dev remotes/origin/dev
$ git submodule init cli/shell-y
$ git submodule init libs/lib-shared
$ git submodule update --remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/blog/assets/images/git_submodules_diagram_03.svg"&gt;&lt;/p&gt;
&lt;p&gt;To make a change in lib-shared, he needs to fork a new feature-branch from lib-shared's dev branch and simply pushes his branch to remote and notify the manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;cd libs/lib-shared&lt;/span&gt;
&lt;span class="err"&gt;git checkout -b feature-authors remotes/origin/dev&lt;/span&gt;
&lt;span class="err"&gt;touch AUTHORS&lt;/span&gt;
&lt;span class="err"&gt;git add AUTHORS&lt;/span&gt;
&lt;span class="err"&gt;git commit -m &amp;quot;added AUTHORS file&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;echo &amp;quot;bijan-e&amp;quot; &amp;gt; AUTHORS&lt;/span&gt;
&lt;span class="err"&gt;git commit -a -m &amp;quot;added bijan-e to AUTHORS&amp;quot;&lt;/span&gt;
&lt;span class="err"&gt;git push origin feature-authors&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If kevin now goes to the root of his super-project, he sees that his super-project has changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule status
 fa75a2c38ed4b80f1c42e4434fd3d43e230605ba ../cli/shell-y &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
+51b9fbe3b08bc793193a70a48e762b4a5629514f lib-shared &lt;span class="o"&gt;(&lt;/span&gt;v0.1-2-g51b9fbe&lt;span class="o"&gt;)&lt;/span&gt;
-a2b7c92292a6b47a5ece5feea9e3390879d49d89 ../protocols/protocol-x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/blog/assets/images/git_submodules_diagram_04.svg"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; sign beside lib-shared submodule shows that this subodule has changes which super-project does not added yet. the &lt;code&gt;-&lt;/code&gt; sign beside protocol-x submodule indictes that this module has not been initialized. Since his changes to lib-shared has not been accepted yet, he should revert update this submodule to point at the right hash commit which dev knows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/blog/assets/images/git_submodules_diagram_05.svg"&gt;&lt;/p&gt;
&lt;p&gt;Now The manager is notified and should review kevin's changes and decide if it's good enough to be merged into lib-shared's dev branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/projects/super-project/libs/lib-shared
$ git pull origin
$ git tag -a v0.1-dev -m v0.1-dev
$ git checkout -b feature-authors remotes/origin/feature-authors
$ // Code Review
$ git checkout dev
$ git merge --no-ff feature-authors -m &lt;span class="s2"&gt;&amp;quot;merged feature authors&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/blog/assets/images/git_submodules_diagram_06.svg"&gt;&lt;/p&gt;
&lt;p&gt;Now lib-shared has reached v0.1-dev-3 should be included in super-project's dev branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/projects/super-project
$ git submodule status
 fa75a2c38ed4b80f1c42e4434fd3d43e230605ba cli/shell-y &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
+04edc4cd6f3916f5d51a7f5cc7a6df92b11014a9 libs/lib-shared &lt;span class="o"&gt;(&lt;/span&gt;v0.1-dev-3-g04edc4c&lt;span class="o"&gt;)&lt;/span&gt;
 a2b7c92292a6b47a5ece5feea9e3390879d49d89 protocols/protocol-x &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
$ git diff --submodule
Submodule libs/lib-shared 9f0dd01..04edc4c:
  &amp;gt; merged feature authors
$ git add libs/lib-shared
$ git commit -m &lt;span class="s2"&gt;&amp;quot;merged lib-shared v0.1-dev-3&amp;quot;&lt;/span&gt;
$ git push origin dev --recurse-submodules&lt;span class="o"&gt;=&lt;/span&gt;on-demand
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The changes of lib-shared and super-project should can be send to their remotes manually for each project or only once from super-project using &lt;code&gt;--recurse-submodules&lt;/code&gt; argument. Note that push doesn't push submodule's tags so we need to push submodules's tags separately:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule foreach &lt;span class="s1"&gt;&amp;#39;git push --tags&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/blog/assets/images/git_submodules_diagram_07.svg"&gt;&lt;/p&gt;
&lt;p&gt;Now kevin can fetch new changes in dev:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/kevin/projects/kevin-project
$ git pull origin dev
$ git submodule update --remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/blog/assets/images/git_submodules_diagram_08.svg"&gt;&lt;/p&gt;
&lt;p&gt;Merging branches in super-project is a little tricky. When merging dev branch into master, we should always check not to change &lt;code&gt;.gitmodules&lt;/code&gt; between merges. To do that we use &lt;code&gt;--no-commit&lt;/code&gt; argument just to do merge the, and before &lt;code&gt;git commit&lt;/code&gt; we should revert any changing comming from dev to master into &lt;code&gt;.gitmodules&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/projects/super-project
$ git checkout master
$ git submodule update
$ git submodule foreach &lt;span class="s1"&gt;&amp;#39;git checkout master&amp;#39;&lt;/span&gt;
$ git merge --no-commit --no-ff dev
$ git reset HEAD .gitmodules
$ git checkout -- .gitmodules
$ git diff --submodule --staged
Submodule libs 9f0dd01..04edc4c:
  &amp;gt; merged feature authors
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;git diff --submodule --staged&lt;/code&gt; shows which changes is going from submodules. We can use this commit messages to create a &lt;code&gt;CHANGELOG&lt;/code&gt; file. FInally before committing we should also merge submodules changes using &lt;code&gt;--merge&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule update --merge
Updating 9f0dd01..04edc4c
Fast-forward
 AUTHORS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; +
 &lt;span class="m"&gt;1&lt;/span&gt; file changed, &lt;span class="m"&gt;1&lt;/span&gt; insertion&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; AUTHORS
Submodule path &lt;span class="s1"&gt;&amp;#39;libs/lib-shared&amp;#39;&lt;/span&gt;: merged in &lt;span class="s1"&gt;&amp;#39;04edc4cd6f3916f5d51a7f5cc7a6df92b11014a9&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This confirms what the changes from dev's submodules are also merged into master's submodules. We should finalize this merge by committing changes and pushing both super-project and sub-project merge commits to remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -m &lt;span class="s2"&gt;&amp;quot;merged v0.1-dev-1 into master&amp;quot;&lt;/span&gt;
$ git submodule foreach &lt;span class="s1"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/blog/assets/images/git_submodules_diagram_09.svg"&gt;&lt;/p&gt;</content><category term="Git"></category><category term="git"></category><category term="svn"></category><category term="git submodules"></category></entry></feed>