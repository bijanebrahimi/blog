<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Routines Excluded</title><link href="http://bijanebrahimi.github.io/blog/" rel="alternate"></link><link href="http://bijanebrahimi.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>http://bijanebrahimi.github.io/blog/</id><updated>2017-02-06T12:22:00+03:30</updated><entry><title>Git Submodules</title><link href="http://bijanebrahimi.github.io/blog/git-submodules.html" rel="alternate"></link><updated>2017-02-06T12:22:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2017-02-06:blog/git-submodules.html</id><summary type="html">&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;There are many good articles and blog posts on the Interenet describing how to migrate from svn to git repository. There are a lot of advantages to migrate to git, (&lt;a href="nvie.com/posts/a-successful-git-branching-model"&gt;git-flow&lt;/a&gt; to metion one) but there are also a few draw-backs. For example svn supports &lt;a href="http://svnbook.red-bean.com/en/1.7/svn.serverconfig.pathbasedauthz.html"&gt;Path-Based Authorization&lt;/a&gt; meaning great control over who sees what parts of the project. Unfortunately git does not provide such mechanism meaning to overcome this task, we should split such files or directories into separate git repositories to restrict access per project and yet keep the project as a whole. In this post I explain how to use git submdules to do that.&lt;/p&gt;
&lt;h1&gt;Git-Flow using submodules&lt;/h1&gt;
&lt;p&gt;Imagine the following scenario in which we have a shared library named &lt;strong&gt;lib-shared&lt;/strong&gt; and two projects named &lt;strong&gt;protocol-x&lt;/strong&gt; and &lt;strong&gt;shell-y&lt;/strong&gt; which different developers have access to one of them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find . -type d
./libs/lib-shared
./routing/protocol-x
./cli/shell-y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we're going to do is to create a separate git repository for each project (as sub-projects):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir lib-shared
$ &lt;span class="nb"&gt;cd&lt;/span&gt; lib-shared
$ git init
$ touch .gitignore
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;added .gitignore&amp;quot;&lt;/span&gt;
$ git remote add origin git@debian:root/lib-shared.git
$ git tag -a v0.1 -m v0.1
$ git push origin --all
$ git push --tags
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
$ mkdir protocol-x
$ &lt;span class="nb"&gt;cd&lt;/span&gt; protocol-x
$ git init
$ touch .gitignore
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;added .gitignore&amp;quot;&lt;/span&gt;
$ git remote add origin git@debian:root/protocol-x.git
$ git tag -a v0.1 -m v0.1
$ git push origin --all
$ git push --tags
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
$ mkdir shell-y
$ &lt;span class="nb"&gt;cd&lt;/span&gt; shell-y
$ git init
$ touch .gitignore
$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;added .gitignore&amp;quot;&lt;/span&gt;
$ git remote add origin git@debian:root/shell-y.git
$ git tag -a v0.1 -m v0.1
$ git push origin --all
$ git push --tags
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we create another project (super-project) containing these projects. To do that, we should add above sub-projects as submodules. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/
$ mkdir super-project
$ &lt;span class="nb"&gt;cd&lt;/span&gt; super-project
$ git init
$ git remote add origin git@debian:root/super-project.git
$ git submodule add -b master --name lib-shared git@debian:root/lib-shared libs/lib-shared
$ git submodule add -b master --name protocol-x git@debian:root/protocol-x protocols/protocol-x
$ git submodule add -b master --name shell-y git@debian:root/shell-y cli/shell-y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running &lt;code&gt;git status&lt;/code&gt; we can see that git created a file named &lt;code&gt;.gitmodules&lt;/code&gt; which keeps a list of our current submodules. This file should be a part of source code and it'll help other people cloning this super-project to know which submodules they should also get using &lt;code&gt;git submodule init&lt;/code&gt; (if they have permission ofc). Also Git sees these sub-projects as files instead of directories. This is how git sees submodules. Each submodule points to a git commit SHA-1 which in our case is the latest commit in master branch of each-subproject. You can confirm this by running &lt;code&gt;git diff --staged&lt;/code&gt; command. More interestingly, we can see which version of submodules out super-project is following (before committing):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule status
 fa75a2c38ed4b80f1c42e4434fd3d43e230605ba cli/shell-y &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
 9f0dd01bea1ec7f719bf17e2ff2018dc64fbe335 libs/lib-shared &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
 a2b7c92292a6b47a5ece5feea9e3390879d49d89 protocols/protocol-x &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can commit the changes in our super-project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -m &lt;span class="s2"&gt;&amp;quot;added libshared, protocol-x and shell-y sub-projects&amp;quot;&lt;/span&gt;
$ git tag -a v0.1 -m &lt;span class="s2"&gt;&amp;quot;v0.1&amp;quot;&lt;/span&gt;
$ git push origin --all
$ git push --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/assets/images/git_submodules_diagram_01.svg" /&gt;&lt;/p&gt;
&lt;p&gt;Now to follow our git-flow, we need to fork a new branch named &lt;strong&gt;dev&lt;/strong&gt; from master branch. What we should do  first is to create a dev branch in all of our sub-projects using &lt;code&gt;git submodule foreach&lt;/code&gt; which executes given commands in each of our (initialized) submodules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/projects/super-project
$ git checkout -b dev master
$ git submodule foreach &lt;span class="s1"&gt;&amp;#39;git pull origin master; git checkout -b dev master; $ $ git push origin dev&amp;#39;&lt;/span&gt;
$ sed -i&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/branch = master/branch = dev/g&amp;#39;&lt;/span&gt; .gitmodules
$ git add .gitmodules
$ git commit -m &lt;span class="s2"&gt;&amp;quot;forked dev branch&amp;quot;&lt;/span&gt;
$ git push origin dev
$ git tag -a v0.1-dev -m v0.1-dev
$ git push origin --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/assets/images/git_submodules_diagram_02.svg" /&gt;&lt;/p&gt;
&lt;p&gt;Now it's time for our developers to clone the super project and changes some code. our developer &lt;strong&gt;kevin&lt;/strong&gt; is the maintainer of the shell-y and only have access to our shared library beside his project so he should avoid trying to get protocol-x project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make /home/kevin/projects/kevin-project
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/kevin/projects/kevin-project
$ git init
$ git remote add origin git@debian:root/super-project.git
$ git fetch origin
$ git checkout -b dev remotes/origin/dev
$ git submodule init cli/shell-y
$ git submodule init libs/lib-shared
$ git submodule update --remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/assets/images/git_submodules_diagram_03.svg" /&gt;&lt;/p&gt;
&lt;p&gt;To make a change in lib-shared, he needs to fork a new feature-branch from lib-shared's dev branch and simply pushes his branch to remote and notify the manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd libs/lib-shared
git checkout -b feature-authors remotes/origin/dev
touch AUTHORS
git add AUTHORS
git commit -m &amp;quot;added AUTHORS file&amp;quot;
echo &amp;quot;bijan-e&amp;quot; &amp;gt; AUTHORS
git commit -a -m &amp;quot;added bijan-e to AUTHORS&amp;quot;
git push origin feature-authors
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If kevin now goes to the root of his super-project, he sees that his super-project has changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule status
 fa75a2c38ed4b80f1c42e4434fd3d43e230605ba ../cli/shell-y &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
+51b9fbe3b08bc793193a70a48e762b4a5629514f lib-shared &lt;span class="o"&gt;(&lt;/span&gt;v0.1-2-g51b9fbe&lt;span class="o"&gt;)&lt;/span&gt;
-a2b7c92292a6b47a5ece5feea9e3390879d49d89 ../protocols/protocol-x
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/assets/images/git_submodules_diagram_04.svg" /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;+&lt;/code&gt; sign beside lib-shared submodule shows that this subodule has changes which super-project does not added yet. the &lt;code&gt;-&lt;/code&gt; sign beside protocol-x submodule indictes that this module has not been initialized. Since his changes to lib-shared has not been accepted yet, he should revert update this submodule to point at the right hash commit which dev knows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/assets/images/git_submodules_diagram_05.svg" /&gt;&lt;/p&gt;
&lt;p&gt;Now The manager is notified and should review kevin's changes and decide if it's good enough to be merged into lib-shared's dev branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/projects/super-project/libs/lib-shared
$ git pull origin
$ git tag -a v0.1-dev -m v0.1-dev
$ git checkout -b feature-authors remotes/origin/feature-authors
$ // Code Review
$ git checkout dev
$ git merge --no-ff feature-authors -m &lt;span class="s2"&gt;&amp;quot;merged feature authors&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/assets/images/git_submodules_diagram_06.svg" /&gt;&lt;/p&gt;
&lt;p&gt;Now lib-shared has reached v0.1-dev-3 should be included in super-project's dev branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/projects/super-project
$ git submodule status
 fa75a2c38ed4b80f1c42e4434fd3d43e230605ba cli/shell-y &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
+04edc4cd6f3916f5d51a7f5cc7a6df92b11014a9 libs/lib-shared &lt;span class="o"&gt;(&lt;/span&gt;v0.1-dev-3-g04edc4c&lt;span class="o"&gt;)&lt;/span&gt;
 a2b7c92292a6b47a5ece5feea9e3390879d49d89 protocols/protocol-x &lt;span class="o"&gt;(&lt;/span&gt;v0.1&lt;span class="o"&gt;)&lt;/span&gt;
$ git diff --submodule
Submodule libs/lib-shared 9f0dd01..04edc4c:
  &amp;gt; merged feature authors
$ git add libs/lib-shared
$ git commit -m &lt;span class="s2"&gt;&amp;quot;merged lib-shared v0.1-dev-3&amp;quot;&lt;/span&gt;
$ git push origin dev --recurse-submodules&lt;span class="o"&gt;=&lt;/span&gt;on-demand
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The changes of lib-shared and super-project should can be send to their remotes manually for each project or only once from super-project using &lt;code&gt;--recurse-submodules&lt;/code&gt; argument. Note that push doesn't push submodule's tags so we need to push submodules's tags separately:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule foreach &lt;span class="s1"&gt;&amp;#39;git push --tags&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/assets/images/git_submodules_diagram_07.svg" /&gt;&lt;/p&gt;
&lt;p&gt;Now kevin can fetch new changes in dev:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/kevin/projects/kevin-project
$ git pull origin dev
$ git submodule update --remote
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/assets/images/git_submodules_diagram_08.svg" /&gt;&lt;/p&gt;
&lt;p&gt;Merging branches in super-project is a little tricky. When merging dev branch into master, we should always check not to change &lt;code&gt;.gitmodules&lt;/code&gt; between merges. To do that we use &lt;code&gt;--no-commit&lt;/code&gt; argument just to do merge the, and before &lt;code&gt;git commit&lt;/code&gt; we should revert any changing comming from dev to master into &lt;code&gt;.gitmodules&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /home/manager/projects/super-project
$ git checkout master
$ git submodule update
$ git submodule foreach &lt;span class="s1"&gt;&amp;#39;git checkout master&amp;#39;&lt;/span&gt;
$ git merge --no-commit --no-ff dev
$ git reset HEAD .gitmodules
$ git checkout -- .gitmodules
$ git diff --submodule --staged
Submodule libs 9f0dd01..04edc4c:
  &amp;gt; merged feature authors
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;git diff --submodule --staged&lt;/code&gt; shows which changes is going from submodules. We can use this commit messages to create a &lt;code&gt;CHANGELOG&lt;/code&gt; file. FInally before committing we should also merge submodules changes using &lt;code&gt;--merge&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git submodule update --merge
Updating 9f0dd01..04edc4c
Fast-forward
 AUTHORS &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; +
 &lt;span class="m"&gt;1&lt;/span&gt; file changed, &lt;span class="m"&gt;1&lt;/span&gt; insertion&lt;span class="o"&gt;(&lt;/span&gt;+&lt;span class="o"&gt;)&lt;/span&gt;
 create mode &lt;span class="m"&gt;100644&lt;/span&gt; AUTHORS
Submodule path &lt;span class="s1"&gt;&amp;#39;libs/lib-shared&amp;#39;&lt;/span&gt;: merged in &lt;span class="s1"&gt;&amp;#39;04edc4cd6f3916f5d51a7f5cc7a6df92b11014a9&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This confirms what the changes from dev's submodules are also merged into master's submodules. We should finalize this merge by committing changes and pushing both super-project and sub-project merge commits to remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git commit -m &lt;span class="s2"&gt;&amp;quot;merged v0.1-dev-1 into master&amp;quot;&lt;/span&gt;
$ git submodule foreach &lt;span class="s1"&gt;&amp;#39;git push origin master&amp;#39;&lt;/span&gt;
$ git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="image" src="/assets/images/git_submodules_diagram_09.svg" /&gt;&lt;/p&gt;</summary><category term="git"></category><category term="svn"></category><category term="git submodules"></category></entry><entry><title>py3status Configuration</title><link href="http://bijanebrahimi.github.io/blog/py3status-configuration.html" rel="alternate"></link><updated>2016-03-14T22:35:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2016-03-14:blog/py3status-configuration.html</id><summary type="html">&lt;p&gt;Edited: Follow changes via my &lt;a href="https://github.com/bijanebrahimi/py3status-config"&gt;Github&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Screenshot&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="py3status Configuration" src="https://bijanebrahimi.github.io/py3status-config/images/py3status.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dependencies&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ultrabug/py3status"&gt;py3status&lt;/a&gt; is an extensible i3status wrapper written in python.&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-flag"&gt;&lt;/i&gt; &lt;a href="https://fortawesome.github.io/Font-Awesome/"&gt;Font Awesome&lt;/a&gt;: Font Icons for i3-bar&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-camera"&gt;&lt;/i&gt; &lt;a href="https://github.com/naelstrof/maim"&gt;maim&lt;/a&gt;: a utility that takes screenshots of your desktop&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-lock"&gt;&lt;/i&gt; &lt;a href="http://i3wm.org/i3lock/"&gt;i3lock&lt;/a&gt;: is a simple screen locker like slock.&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-picture-o"&gt;&lt;/i&gt; &lt;a href="https://github.com/bijanebrahimi/waffle"&gt;waffle&lt;/a&gt;: to randomly download/change wallpaper.&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-calendar"&gt;&lt;/i&gt; &lt;a href="https://gahshomar.github.io/gahshomar/"&gt;gahshomar&lt;/a&gt; is a calendar with simplicity in design and elegance in execution.&lt;/li&gt;
&lt;li&gt;&lt;i class="fa fa-music"&gt;&lt;/i&gt; &lt;a href="http://audacious-media-player.org/"&gt;audacious&lt;/a&gt; Music Player (needs qdbus and audacious mpris plugins installed).&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="i3"></category><category term="py3status"></category><category term="i3status"></category><category term="font-awesome"></category></entry><entry><title>Books I Read in 2015</title><link href="http://bijanebrahimi.github.io/blog/books-i-read-in-2015.html" rel="alternate"></link><updated>2016-03-13T12:09:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2016-03-13:blog/books-i-read-in-2015.html</id><summary type="html">&lt;p&gt;The List isn't long. in fact I spend the entire year in a military camp doing my
final year of military service. my resolution for the year to read Books
I wished to read but didn't have the time and I enjoyed reading every one of them.&lt;/p&gt;
&lt;h2&gt;Novels&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Divergent Series by Veronica Roth&lt;/li&gt;
&lt;li&gt;Lord of the Rings by J.R.R Tolkien&lt;/li&gt;
&lt;li&gt;Inferno by Dan Brown&lt;/li&gt;
&lt;li&gt;The Lost Symbol by Dan Brown&lt;/li&gt;
&lt;li&gt;Beloved by Toni Morrison&lt;/li&gt;
&lt;li&gt;The Fault in our starts by John Green&lt;/li&gt;
&lt;li&gt;The Abundance of Katherines by John Green&lt;/li&gt;
&lt;li&gt;The First Man by Albert Camus&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Computer &amp;amp; Programming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Clean Code by Robert C. Martin&lt;/li&gt;
&lt;li&gt;Effective Python by Brett Slatkin&lt;/li&gt;
&lt;li&gt;Pro Git by Scott Chacon&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Book"></category><category term="Divergent"></category><category term="Insurgent"></category><category term="Allegiant"></category><category term="Veronica Roth"></category><category term="Lord of the Rings"></category><category term="J.R.R Tolkien"></category><category term="Dan Brown"></category><category term="Lost Symbol"></category><category term="Inferno"></category><category term="Beloved"></category><category term="Toni Morrison"></category><category term="The fault in our stars"></category><category term="The Abundance of Katherines"></category><category term="John Green"></category><category term="The first man"></category><category term="Albert Camus"></category><category term="Clean Code"></category><category term="Robert C. Martin"></category><category term="Effective Python"></category><category term="Brett Slatkin"></category><category term="Pro Git"></category><category term="Scott Chacon"></category></entry><entry><title>A dropdown Tiling Terminal for i3-wm</title><link href="http://bijanebrahimi.github.io/blog/a-dropdown-tiling-terminal-for-i3-wm.html" rel="alternate"></link><updated>2016-02-27T14:27:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2016-02-27:blog/a-dropdown-tiling-terminal-for-i3-wm.html</id><summary type="html">&lt;p&gt;&lt;a href="http://i3wm.org/docs/userguide.html#_scratchpad"&gt;Scratchpad&lt;/a&gt; is one of the
coolest, and unique features in &lt;a href="http://i3wm.org"&gt;i3&lt;/a&gt;. Scratchpad is basically a
hidden workspace that you can send your programs into it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is no way to open that workspace. Instead, when using &lt;code&gt;scratchpad show&lt;/code&gt;,
the window will be shown again, as a floating window, centered on your current
workspace&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using scratchpad, we can turn any terminal into a drop-down terminal. I'm using &lt;a href="http://www.tenshu.net/p/terminator.html"&gt;terminator&lt;/a&gt; which supports tiling (and more)
and &lt;code&gt;F1&lt;/code&gt; key as hot key to toggle terminator since I have no other use for formally
known help button key on linux.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Add this to your i3 config (~/.config/i3/config) and restart i3 (Super+Shift+R)
exec --no-startup-id &amp;quot;terminator -m&amp;quot;
for_window [class=&amp;quot;Terminator&amp;quot; title=&amp;quot;^((?!Terminator Preferences).)*$&amp;quot;] move scratchpad, move position 0 0, resize set 1366 768;
bindsym F1 [class=&amp;quot;Terminator&amp;quot;] scratchpad show;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also view the changes via &lt;a href="https://gist.github.com/bijanebrahimi/6641e8022dffb2e6a5dd"&gt;Github Gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: It's possible to send other programs into scratchpad workspace, and
toggle them using different key bindings. The trick is to exclude &lt;strong&gt;Terminator&lt;/strong&gt;
which is also in Scratchpad from showing. for example, Using the code below we
can simply send any active programs into Scratchpad using &lt;code&gt;Super+Shift+F1&lt;/code&gt; key
and retrieve them one by one by hitting &lt;code&gt;Super+F1&lt;/code&gt; and only by pressing &lt;code&gt;F1&lt;/code&gt; we
can toggle &lt;strong&gt;Terminator&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;bindsym &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;mod&lt;/span&gt;&lt;span class="x"&gt;+Shift+F1 move container to scratchpad&lt;/span&gt;
&lt;span class="x"&gt;bindsym &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;mod&lt;/span&gt;&lt;span class="x"&gt;+F1 [class=&amp;quot;^((?!Terminator).)*&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;] scratchpad show&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="terminal"></category><category term="terminator"></category><category term="i3"></category><category term="scratchpad"></category></entry><entry><title>rofi-todo</title><link href="http://bijanebrahimi.github.io/blog/rofi-todo.html" rel="alternate"></link><updated>2016-02-26T18:15:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2016-02-26:blog/rofi-todo.html</id><summary type="html">&lt;p&gt;If you're unfamiliar with &lt;a href="https://davedavenport.github.io/rofi/"&gt;rofi&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's a popup window switcher roughly based on &lt;a href="http://code.google.com/p/superswitcher/"&gt;superswitcher&lt;/a&gt;,
requiring only xlib and pango&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Rofi has multiple modes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;RUN&lt;/strong&gt;: Shows a list of executables in $PATH and can launch them (optional in a terminal).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DRUN&lt;/strong&gt;: Same as the run launches, but the list is created from the installed desktop files.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Window&lt;/strong&gt;: Show a list of all the windows and allow switching between them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WindowCD&lt;/strong&gt;: Shows a list of the windows on the current desktop and allows switching between them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH&lt;/strong&gt;: Shows a list of SSH targets based on your ssh config file, and allows to quickly ssh into them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Script&lt;/strong&gt;: Allows custom scripted Modi to be added.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using &lt;code&gt;script&lt;/code&gt; mode, one can extend the rofi. There are plenty scripts
other there. you should definitely check &lt;a href="https://davedavenport.github.io/rofi/p07-Scripts.html"&gt;them&lt;/a&gt; out.&lt;/p&gt;
&lt;h2&gt;TODO List Script&lt;/h2&gt;
&lt;p&gt;Script modi can be enabled using &lt;code&gt;name:script&lt;/code&gt; syntax. Just save the following
script somewhere in your &lt;code&gt;PATH&lt;/code&gt; directory like &lt;code&gt;/usr/local/bin&lt;/code&gt;, make sure it's
executable and run the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rofi -modi TODO:/usr/local/bin/rofi_todo.sh -key-todo SuperL+t
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="rofi-todo" src="http://bijanebrahimi.github.io/blog/assets/images/rofi_todolist-rofi_todo.png" /&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nv"&gt;TODO_FILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.rofi_todos

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; ! -a &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    touch &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; list_todos&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;TODO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cat &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="nv"&gt;TODDO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;then&lt;/span&gt;
    list_todos
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nv"&gt;TODO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s2"&gt;&amp;quot;s/\([^a-zA-Z0-9]\)/\\\\\\1/g&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;TODO_UNSCAPED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

    &lt;span class="nv"&gt;MATCHING&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;grep &lt;span class="s2"&gt;&amp;quot;^&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;$&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;MATCHING&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        sed -i &lt;span class="s2"&gt;&amp;quot;/^&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;$&lt;span class="s2"&gt;/d&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;`date +&amp;quot;&lt;/span&gt;%B %d %H:%M&lt;span class="s2"&gt;&amp;quot;` &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO_UNSCAPED&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TODO_FILE&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
    list_todos
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Instructions&lt;/strong&gt;:
- To &lt;strong&gt;Add new TODO&lt;/strong&gt;, just type it (It should be Unique, BTW) at TODO prompt
- To &lt;strong&gt;Delete one&lt;/strong&gt;, Just Select the one and hit Enter&lt;/p&gt;
&lt;p&gt;If you're already using rofi, just add &lt;code&gt;TODO&lt;/code&gt; modi to your existing command-line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rofi -modi DRun,Run,Window,TODO:/usr/local/bin/rofi_todo.sh -key-todo SuperL+t -show TODO
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="rofi"></category><category term="rofi-todo"></category><category term="rofi-script"></category><category term="bash"></category><category term="project"></category></entry><entry><title>Extending The Battery Life in Linux</title><link href="http://bijanebrahimi.github.io/blog/extending-the-battery-life-in-linux.html" rel="alternate"></link><updated>2016-02-25T14:20:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2016-02-25:blog/extending-the-battery-life-in-linux.html</id><summary type="html">&lt;p&gt;Before Running any tunning, the average estimated lifetime of my battery was
about 3 hours (below image). Through this post we learn how to extend it to
almost 4 and a half hours. It's more than 50 percent increase!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I'm currently using a lenovo G50 laptop with Quad-Core AMD CPU equiped
with a 4-cell battery and running &lt;code&gt;i3-wm&lt;/code&gt;, a lightweight tilling window manager
(no Gnome/KDE craps for me) on ArchLinux.
So depending on your hardware and programs you have running and your daily usage
pattern, the results may vary for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Gnome Battery Bench" src="http://bijanebrahimi.github.io/blog/assets/images/extend_linux_battery_life-battery_bench_before_tunning.png" title="Gnome Battery Bench - Before Tunning" /&gt;&lt;/p&gt;
&lt;p&gt;First, run &lt;code&gt;powertop&lt;/code&gt; to find out which devices/processes are draining power the most.
In The &lt;code&gt;Overview Tab&lt;/code&gt; you can actually see what processes/devices are draining
how much power and By applying the Good option in &lt;code&gt;Tunables Tab&lt;/code&gt;, powertop
automatically tunes them. you can do this manually for every item in Tunable tab
or just use the &lt;code&gt;--auto-tune&lt;/code&gt; option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo powertop --auto-tune
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That single command will probably add a noticeable extra minutes to your battery
life. But there are still other ways to improve it more. Let's Go to powertop's
&lt;code&gt;Overview Tab&lt;/code&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Power est.  Usage        Events/s    Category    Description
  5.18 W    0.4 pkts/s               Device      Network interface: wlp2s0 (wl)
  3.80 W    100.0%                   Device      Display backlight
  1.26 W    165.5 ms/s   123.3       Process     /usr/share/atom/atom --type=zygote --no-sandbox
  675 mW    95.9 ms/s    5.3         Process     atom
  660 mW    94.0%                    Device      USB device: USB2.0-CRW (Generic)
  262 mW    27.0 ms/s    90.1        Process     /usr/share/atom/atom --executed-from=/home/bijan --pid=1109
  247 mW    27.2 ms/s    70.4        Process     /usr/lib/xorg-server/Xorg :0 -seat seat0 -auth /run/lightdm/root/:0 -nolisten tc
  103 mW    2.0 ms/s     109.7        kWork      od_dbs_timer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;According to above, after my wireless interface (which i use), the display backlight,
USB CD-RW and my Ethernet interface are the most draining power sources.
The last two I never/rarely use.&lt;/p&gt;
&lt;h3&gt;Turning Off unnecessary devices&lt;/h3&gt;
&lt;p&gt;Since I never/rarely use my CD-RW and I never connect to Internet through wired
connection, so it seems logical to me to disable them. to find my CD-RW device
power location, I used powertop &lt;code&gt;Tunable Tab&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Disable CR-RW
$ echo 0 | s tee /sys/bus/usb/devices/1-1.3/power/autosuspend_delay_ms
$ echo auto | s tee /sys/bus/usb/devices/1-1.3/power/control
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To disable my Ethernet device, first I have to find it's device number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Find Ethernet domain:bus:slot number
$ lspci | grep -i ethernet
03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 10)

# Find relative device on /sys/devices
$ find /sys/devices -name &amp;quot;*03:00.0&amp;quot;
/sys/devices/pci0000:00/0000:00:02.4/0000:03:00.0

# Turn off device
echo 1 | s tee /sys/devices/pci0000:00/0000:00:02.4/0000:03:00.0/remove
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Backlight&lt;/h3&gt;
&lt;p&gt;To reduce the brightness LED backlight, I set a brightness value (between 0 and 255):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; Brightness&lt;/span&gt;
&lt;span class="x"&gt;basedir=&amp;quot;/sys/class/backlight/&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;handler=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="err"&gt;ls&lt;/span&gt; &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;

&lt;span class="x"&gt;chmod 666 &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="x"&gt;/brightness&lt;/span&gt;
&lt;span class="x"&gt;echo 100 &amp;gt; handler/brightness&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Running as a Service&lt;/h1&gt;
&lt;p&gt;To execute the above commands at boot up, I created a shell script and run that
as a service.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# /usr/local/bin/powertop_tuning.sh&lt;/span&gt;

&lt;span class="c1"&gt;# Auto-tune powertop&lt;/span&gt;
powertop --auto-tune

&lt;span class="c1"&gt;# Disable CR-RW&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; s tee /sys/bus/usb/devices/1-1.3/power/autosuspend_delay_ms
&lt;span class="nb"&gt;echo&lt;/span&gt; auto &lt;span class="p"&gt;|&lt;/span&gt; s tee /sys/bus/usb/devices/1-1.3/power/control

&lt;span class="c1"&gt;# Disable Ethernet&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; s tee /sys/devices/pci0000:00/0000:00:02.4/0000:03:00.0/remove

&lt;span class="c1"&gt;# Brightness&lt;/span&gt;
chmod &lt;span class="m"&gt;666&lt;/span&gt; /sys/class/backlight/radeon_bl0/brightness
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt; &amp;gt; /sys/class/backlight/radeon_bl0/brightness
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;And to create proper systemd service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /etc/systemd/system/powertop_tuning.service
[Unit]
Description=&amp;quot;PowerTop Tuning config&amp;quot;
ConditionPathExists=/usr/local/bin/powertop_tuning.sh

[Service]
Type=oneshot
RemainAfterExit=yes
KillMode=none
ExecStart=/usr/local/bin/powertop_tuning.sh
ExecStop=exit

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, to make &lt;code&gt;powertop_tuning&lt;/code&gt; service run automatically, just enable the service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; powertop_tuning.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The result is very satisfactory. In daily usage, my battery life went up
from about 3 hours to almost 4 and a half hours.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gnome Battery Bench" src="http://bijanebrahimi.github.io/blog/assets/images/extend_linux_battery_life-battery_bench_after_tunning.png" title="Gnome Battery Bench - After Tunning" /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The tests and battery benchmark did not placed in a controlled
environment but it seems logical to expect similar effects.&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="linux"></category><category term="powertop"></category><category term="power"></category></entry><entry><title>Multiseat Linux Desktop, Multiple X servers</title><link href="http://bijanebrahimi.github.io/blog/multiseat-linux-desktop-multiple-x-servers.html" rel="alternate"></link><updated>2014-10-22T10:35:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2014-10-22:blog/multiseat-linux-desktop-multiple-x-servers.html</id><summary type="html">&lt;p&gt;This is the first solution in the main Article &lt;a href="http://bijanebrahimi.github.io/blog/multiseat-linux-desktop.html"&gt;Multiseat Linux Desktop&lt;/a&gt;. you may also find other solutions for multiseat configuration in there as well.&lt;/p&gt;
&lt;h3&gt;Hardware Requirements&lt;/h3&gt;
&lt;p&gt;for each user, we need seperate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mouse&lt;/li&gt;
&lt;li&gt;keyboard&lt;/li&gt;
&lt;li&gt;monitor&lt;/li&gt;
&lt;li&gt;Video Card&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each Monitor will be attached to a seperate Video Card.&lt;/p&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;the &lt;a href="https://en.wikipedia.org/wiki/X_Window_System"&gt;X Window System&lt;/a&gt; is a system program which implements the hardware layer and the basis for graphical user interfaces (GUIs). to run seperate Desktop Environment in linux, we need to run seperate X servers as well. each X server will use separate Video card, Mouse and Keyboard (input devices). for that we have to configure the X server to do that. but first we have to identify the devices we have plugged to the computer to address them later in the X configuration file.
&lt;!-- BREAK --&gt;&lt;/p&gt;
&lt;h3&gt;Hardware Detection&lt;/h3&gt;
&lt;p&gt;we can find our input devices (Mouse &amp;amp; Keyboards) in &lt;code&gt;/dev/input&lt;/code&gt; directory. lets look to see what have we here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -la /dev/input
drwxr-xr-x  &lt;span class="m"&gt;4&lt;/span&gt; root root    &lt;span class="m"&gt;320&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 .
drwxr-xr-x &lt;span class="m"&gt;15&lt;/span&gt; root root   &lt;span class="m"&gt;3060&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:59 ..
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; root root    &lt;span class="m"&gt;160&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 by-id
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; root root    &lt;span class="m"&gt;220&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 by-path
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;64&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event0
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;65&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event1
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;66&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event2
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;67&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event3
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;68&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event4
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;69&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event5
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;70&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event6
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;71&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event7
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;72&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event8
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;63&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 mice
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;32&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 mouse0
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;33&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 mouse1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;before explaining what is each of these files and directories, first we have to look at their permissions. they belogs to root user and group. so for reading them, we have to have read permission. run the below commands as super user or just run them using the &lt;code&gt;sudo&lt;/code&gt; command which i did.&lt;/p&gt;
&lt;p&gt;each &lt;code&gt;/dev/input/event*&lt;/code&gt; file is an input device file. to find out which one is related to which input device we can print the files and see if it contains output when we move our mouse or press a key. so i did run the command and played with my input devices to see which one is which.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo cat /dev/input/event0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;do this till you find all of your input devices.&lt;/p&gt;
&lt;p&gt;an alternative way (which i preffer) is to look into &lt;code&gt;/dev/input/by-id/&lt;/code&gt; directory. your Input devices should be listed there with their human readable names.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -la /dev/input/by-id/
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; root root &lt;span class="m"&gt;160&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 .
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; root root &lt;span class="m"&gt;160&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 .
drwxr-xr-x &lt;span class="m"&gt;4&lt;/span&gt; root root &lt;span class="m"&gt;320&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 ..
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-15ca_USB_Optical_Mouse-event-mouse -&amp;gt; ../event2
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-15ca_USB_Optical_Mouse-mouse -&amp;gt; ../mouse0
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-CHICONY_USB_Keyboard-event-if01 -&amp;gt; ../event4
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-CHICONY_USB_Keyboard-event-kbd -&amp;gt; ../event3
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-Logitech_Logitech_USB_Keyboard-event-if01 -&amp;gt; ../event1
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-Logitech_Logitech_USB_Keyboard-event-kbd -&amp;gt; ../event0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;since you may notice, there may be a lot more input devices there. that's because linux will create several input device files for devices like Keyboards which have fancy buttons. try the old &lt;code&gt;cat&lt;/code&gt; command to find out which one is your proper device driver file. i did it this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo cat /dev/input/by-id/usb-15ca_USB_Optical_Mouse-event-mouse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;write your input device names with their related device file name somewhere cause we're going to need those later.&lt;/p&gt;
&lt;p&gt;at last for Video Cards. Video cards are identified by their address on the PCI bus. so to find them we can use &lt;code&gt;lspci&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ lspci &lt;span class="p"&gt;|&lt;/span&gt;  grep VGA
00:09.0 VGA compatible controller: nVidia Corporation NV18 &lt;span class="o"&gt;[&lt;/span&gt;GeForce4 MX &lt;span class="m"&gt;4000&lt;/span&gt; AGP 8x&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;rev c1&lt;span class="o"&gt;)&lt;/span&gt;
00:0a.0 VGA compatible controller: nVidia Corporation NV18 &lt;span class="o"&gt;[&lt;/span&gt;GeForce4 MX &lt;span class="m"&gt;4000&lt;/span&gt; AGP 8x&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;rev c1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this command lists the pci devices connected to the computer and filters the lines containing VGA. the number on the left is the device PCI address. now we have the table below for our multiseat configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Seat number one&lt;/li&gt;
&lt;li&gt;mouse: /dev/input/event2&lt;/li&gt;
&lt;li&gt;keyboard: /dev/input/event0&lt;/li&gt;
&lt;li&gt;Video Card: 00:09.0&lt;/li&gt;
&lt;li&gt;Seat number two&lt;/li&gt;
&lt;li&gt;mouse: /dev/input/event8&lt;/li&gt;
&lt;li&gt;keyboard: /dev/input/event3&lt;/li&gt;
&lt;li&gt;Video Card: /dev/input/event8&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;X Configuration&lt;/h3&gt;
&lt;p&gt;the X keeps it's configuration file in &lt;code&gt;/etc/X11&lt;/code&gt; directory. we can directly modify it's current configuration file &lt;code&gt;xorg.conf&lt;/code&gt; or we can simply create an alternative configuration file and tell X to read from it manually. that will help us to run X with default configurations if our configuration somehow didn't work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo touch /etc/X11/xorg.conf.multiseat
$ sudo nano xorg.conf.multiseat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First of all, we need to set &lt;a href="https://wiki.archlinux.org/index.php/Xorg_multiseat#The_basics"&gt;basic Xorg configuration&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Section &amp;quot;ServerFlags&amp;quot;
    Option &amp;quot;AutoAddDevices&amp;quot;     &amp;quot;false&amp;quot;
    Option &amp;quot;AutoEnableDevices&amp;quot;  &amp;quot;false&amp;quot;
    Option &amp;quot;AllowMouseOpenFail&amp;quot; &amp;quot;on&amp;quot;
    Option &amp;quot;AllowEmptyInput&amp;quot; &amp;quot;on&amp;quot;
    Option &amp;quot;ZapWarning&amp;quot;         &amp;quot;on&amp;quot;
    Option &amp;quot;HandleSpecialKeys&amp;quot;  &amp;quot;off&amp;quot; # Zapping on
    Option &amp;quot;DRI2&amp;quot; &amp;quot;on&amp;quot;
    Option &amp;quot;Xinerama&amp;quot; &amp;quot;off&amp;quot;
EndSection
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;after that we need to define input devices, screens, monitors and layouts. do the following configuration for each seat you want to have. so first we need to define out input devices. look at the "Option Device". it is the device file name we detect earlier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Section &amp;quot;InputDevice&amp;quot;
    Identifier      &amp;quot;Keyboard0&amp;quot;
    Driver          &amp;quot;evdev&amp;quot;
    Option          &amp;quot;Device&amp;quot;                &amp;quot;/dev/input/event0&amp;quot;
    Option &amp;quot;xkb_rules&amp;quot; &amp;quot;evdev&amp;quot;
    Option &amp;quot;xkb_model&amp;quot; &amp;quot;evdev&amp;quot;
    Option &amp;quot;xkb_layout&amp;quot; &amp;quot;us&amp;quot;
    Option &amp;quot;GrabDevice&amp;quot; &amp;quot;on&amp;quot; # prevent send event to other X-servers
EndSection
Section &amp;quot;InputDevice&amp;quot;
    Identifier &amp;quot;Mouse0&amp;quot;
    Driver &amp;quot;evdev&amp;quot;
    Option &amp;quot;Device&amp;quot; &amp;quot;/dev/input/event2&amp;quot;
    Option &amp;quot;GrabDevice&amp;quot; &amp;quot;on&amp;quot;
EndSection
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now we need to define Screen with uses Monitor and Device which is our Video Card (you can tweak the Modes and ... if you like). the BusId Option is the PCI address we also found earlier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Section &amp;quot;Device&amp;quot;
    Identifier      &amp;quot;Nvidia0&amp;quot;
    Driver          &amp;quot;nouveau&amp;quot;
    BusId           &amp;quot;PCI:00:09.0&amp;quot;
EndSection
    Section &amp;quot;Monitor&amp;quot;
    Identifier      &amp;quot;Lg0&amp;quot;
    HorizSync       30-93
    VertRefresh     60
    Option          &amp;quot;dpms&amp;quot;
EndSection
Section &amp;quot;Screen&amp;quot;
    Identifier              &amp;quot;Screen0&amp;quot;
    Device                  &amp;quot;Nvidia0&amp;quot;
    Monitor                 &amp;quot;Lg0&amp;quot;
    DefaultDepth    24
    Option                  &amp;quot;DPI&amp;quot;   &amp;quot;100x100&amp;quot;
    Subsection &amp;quot;Display&amp;quot;
        Depth   24
        Modes   &amp;quot;1280x1024&amp;quot;     &amp;quot;1024x768&amp;quot;
    EndSubsection
EndSection
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and finally, we need to define a Layout which we will later tell X to load it. it simply gathers the defined input devices and Screens.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Section &amp;quot;ServerLayout&amp;quot;
    Identifier      &amp;quot;Seat0&amp;quot;
    Screen          1               &amp;quot;Screen0&amp;quot;       1                   1
    InputDevice     &amp;quot;Mouse0&amp;quot;        &amp;quot;CorePointer&amp;quot;
    InputDevice     &amp;quot;keyboard0&amp;quot;      &amp;quot;CoreKeyboard&amp;quot;
    Option &amp;quot;Clone&amp;quot; &amp;quot;off&amp;quot;
    Option &amp;quot;AutoAddDevices&amp;quot; &amp;quot;off&amp;quot;
    Option &amp;quot;DisableModInDev&amp;quot; &amp;quot;true&amp;quot;
    Option &amp;quot;SingleCard&amp;quot; &amp;quot;on&amp;quot;   # use this to simplfied isolatedevice option
EndSection
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that's it. do this process again for the next seats and then you're done.&lt;/p&gt;
&lt;h3&gt;Test The Configuration&lt;/h3&gt;
&lt;p&gt;to test if everything is OK, we can run X using our multiseat configuration file and defined Layout. so we need to tell X where to look for COnfiguration file and load Which layout.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ startx -- :1 -layout Seat0 -config xorg.conf.multiseat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the above code, i used &lt;code&gt;startx&lt;/code&gt;. it is a front-end script to xinit. you can also simply run the X directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ X -novtswitch -sharevts -nolisten tcp -config xorg.conf.multiseat -layout Seat0 :1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you may need to go to the 7th console to use it (CTRL+F7) as the second seat will be available on the 8th console and so on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ startx -- :2 -layout Seat0 -config xorg.conf.multiseat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if anything happend,read the log files and search the web.&lt;/p&gt;
&lt;h3&gt;Configure Display Managers&lt;/h3&gt;
&lt;p&gt;it is possible to configure your Display Manager (like KDM or GDM) to behave properly with Multiseat configuration at boot-up, but since i dont use any Display Manager, i can not tell you exactly how to do it. search the web for that matter. you can do it the easy way by configuring your Display Manager rc file or the hard way by editing the &lt;code&gt;/etc/inittab&lt;/code&gt; file if you have systemV.&lt;/p&gt;</summary><category term="X11"></category><category term="config"></category><category term="xephyr"></category></entry><entry><title>Multiseat Linux Desktop</title><link href="http://bijanebrahimi.github.io/blog/multiseat-linux-desktop.html" rel="alternate"></link><updated>2014-10-21T10:35:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2014-10-21:blog/multiseat-linux-desktop.html</id><summary type="html">&lt;p&gt;here is the story. my 3 years old nephew (which i love him so much) is so curious about computers. every time he comes to visit (which is not rarely), he insist on helping me with my computer works. of course he thinks he is helping but i can't have him messing my projects. so i wondered if i can (peacefully) share the computer with him. i searched and i found out about &lt;a href="en.wikipedia.org/wiki/Multiseat_configuration"&gt;Multiseat&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A multiseat, multi-station or multiterminal configuration is a single computer which supports
multiple independent local users at the same time. In modern usage the terms refer to multiple
users using one personal computer, each with their own console, consisting of a keyboard a mouse,
a monitor, and possibly headphones --Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;so obviously that was the solution. time to get my hands dirty on the code :)&lt;/p&gt;
&lt;h3&gt;GNU/Linux Solutions&lt;/h3&gt;
&lt;p&gt;as it may be obvious, there are numbers of solution to do configure the GNU/Linux system to fit my need. so, in the following next articles (below links), i will explain these solution as i experienced them. i try to do them separately and independently, so you can skip ones you are not interested about. here are what i found:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://bijanebrahimi.github.io/blog/multiseat-linux-desktop-multiple-x-servers.html"&gt;Multiple X servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nested X servers (i will write about it very soon)&lt;/li&gt;
&lt;li&gt;The Multi-seat display manager&lt;/li&gt;
&lt;/ol&gt;</summary><category term="X11"></category><category term="config"></category></entry></feed>