<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Routines Excluded - Linux</title><link href="http://bijanebrahimi.github.io/blog/" rel="alternate"></link><link href="http://bijanebrahimi.github.io/blog/feeds/linux.atom.xml" rel="self"></link><id>http://bijanebrahimi.github.io/blog/</id><updated>2017-04-02T22:20:00+04:30</updated><entry><title>Looking at The Evolution of the Unix Time-sharing System</title><link href="http://bijanebrahimi.github.io/blog/looking-at-the-evolution-of-the-unix-time-sharing-system.html" rel="alternate"></link><published>2017-04-02T22:20:00+04:30</published><updated>2017-04-02T22:20:00+04:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2017-04-02:/blog/looking-at-the-evolution-of-the-unix-time-sharing-system.html</id><summary type="html">&lt;h1&gt;Evolution of the Unix Time-Sharing System&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.read.seas.harvard.edu/~kohler/class/aosref/ritchie84evolution.pdf"&gt;The Evolution of the Unix Time-Sharing System&lt;/a&gt;&lt;/strong&gt; is an article by &lt;strong&gt;Denis Ritchie&lt;/strong&gt;
describing the early history of the &lt;strong&gt;UNIX&lt;/strong&gt; operating system, including creation and
design of some of (almost) unique features of the the operating system such as it's filesystem,
process controlls, I …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Evolution of the Unix Time-Sharing System&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.read.seas.harvard.edu/~kohler/class/aosref/ritchie84evolution.pdf"&gt;The Evolution of the Unix Time-Sharing System&lt;/a&gt;&lt;/strong&gt; is an article by &lt;strong&gt;Denis Ritchie&lt;/strong&gt;
describing the early history of the &lt;strong&gt;UNIX&lt;/strong&gt; operating system, including creation and
design of some of (almost) unique features of the the operating system such as it's filesystem,
process controlls, I/O redirection and a few more. Surprisingly, almost 50 years later,
we're experiencing almost the same features (ofc with many more new cool stuff) but it's
fascinating to see how much of the design still is within the current Unix-based operating
systems such as &lt;strong&gt;linux&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;While I'm highly recommending reading the original article, I find it fun to track some
of mysteries I was facing at work lately:&lt;/p&gt;
&lt;h1&gt;Zombie Town&lt;/h1&gt;
&lt;p&gt;With adaption of new &lt;code&gt;fork&lt;/code&gt; system call, forking (&lt;code&gt;fork&lt;/code&gt;) a new process and executing (&lt;code&gt;exec&lt;/code&gt;)
the child command has become somewhat of an standard. Investitaging the actual process, reminded
me of chasing a &lt;strong&gt;BUG&lt;/strong&gt; which mysteriousy brought down some of our &lt;strong&gt;BSD&lt;/strong&gt; machines at work.
It turned out, somehow one f our daemons running as root is producing &lt;strong&gt;zombie&lt;/strong&gt; processes without
attending them. Although a zombie process is merely just a few structs in kernel memory, leaving
them unattended may lead to unexpected behaviors. In our case, the zombie processes caused the
&lt;code&gt;root&lt;/code&gt; user to exceed it's maximum running processes limit (&lt;code&gt;kern.maxprocperuid&lt;/code&gt;) causing
the system to stop working. So what was the issue?&lt;/p&gt;
&lt;p&gt;Ever wondered what actually happens between forking a new process, clonning the current process
to an almost exact copy of it's own and actually executing the child command? and what actually
can go wrong between these two calls? Well, the process mentioned above is the same routine the
&lt;a href="https://github.com/freebsd/freebsd/blob/master/lib/libc/gen/popen.c"&gt;popen&lt;/a&gt; function does on &lt;a href="https://github.com/freebsd/freebsd/tree/master/lib/libc"&gt;FreeBSD libc&lt;/a&gt; library. It forks the process, closes all of it's parent
open file descriptors and executing the child command. Since before calling &lt;code&gt;_execv&lt;/code&gt; command, we're
still running the same code as parent, if the code crashes, it crashes like the parent process
crashed, not the child command.&lt;/p&gt;
&lt;p&gt;Still I'm not quiet sure why the code crashes in the child process calling &lt;code&gt;_close&lt;/code&gt; before
executing the &lt;code&gt;_execv&lt;/code&gt; system call but a quick fix was to install a &lt;code&gt;SIGCHLD&lt;/code&gt; handler, closing
the child zombie process.&lt;/p&gt;
&lt;h1&gt;Know your Builtins&lt;/h1&gt;
&lt;p&gt;As ritchie continues, when addapting the new multiprocessing capability with design of the
new &lt;code&gt;fork&lt;/code&gt; system call, they discovered that the &lt;code&gt;chdir&lt;/code&gt; command stopeed working. Investigation
through the process, they relasized now that when shell forks the &lt;code&gt;chdir&lt;/code&gt; procss, it executed
fine and actually did change the current working directory but since it's not changing it's 
parent process (the running shell), after termination, the shell is still in the same directory
as before.&lt;/p&gt;
&lt;p&gt;I actually found a similar &lt;strong&gt;BUG&lt;/strong&gt; in one of our programs a few month before, when a fellow
programmer modified a shell script adding pull path names to every commands including the
&lt;code&gt;cd&lt;/code&gt; command. since &lt;code&gt;/bin/cd&lt;/code&gt; is a binary and can't effect the parent shell process (the same
reason above), the script was end up doing it's stuff in a wrong directory. so it's
&lt;strong&gt;Important&lt;/strong&gt; to notice that &lt;code&gt;cd&lt;/code&gt; command is actually a built-in shell command, capable of
changing current shell working directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; is a shell &lt;span class="nb"&gt;builtin&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, what's the use of the &lt;code&gt;cd&lt;/code&gt; binary command? I'm not quiet sure but one &lt;a href="https://unix.stackexchange.com/a/50060"&gt;example&lt;/a&gt;  I find
was to check which directories we have access to visit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -type d -exec &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="se"&gt;\;&lt;/span&gt; -print
&lt;/pre&gt;&lt;/div&gt;</content><category term="unix"></category><category term="design"></category><category term="ritchie"></category><category term="thompson"></category><category term="linux"></category><category term="article"></category></entry><entry><title>Extending The Battery Life in Linux</title><link href="http://bijanebrahimi.github.io/blog/extending-the-battery-life-in-linux.html" rel="alternate"></link><published>2016-02-25T14:20:00+03:30</published><updated>2016-02-25T14:20:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2016-02-25:/blog/extending-the-battery-life-in-linux.html</id><summary type="html">&lt;p&gt;Before Running any tunning, the average estimated lifetime of my battery was
about 3 hours (below image). Through this post we learn how to extend it to
almost 4 and a half hours. It's more than 50 percent increase!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I'm currently using a lenovo G50 laptop with Quad-Core AMD …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Before Running any tunning, the average estimated lifetime of my battery was
about 3 hours (below image). Through this post we learn how to extend it to
almost 4 and a half hours. It's more than 50 percent increase!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I'm currently using a lenovo G50 laptop with Quad-Core AMD CPU equiped
with a 4-cell battery and running &lt;code&gt;i3-wm&lt;/code&gt;, a lightweight tilling window manager
(no Gnome/KDE craps for me) on ArchLinux.
So depending on your hardware and programs you have running and your daily usage
pattern, the results may vary for you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Gnome Battery Bench" src="http://bijanebrahimi.github.io/blog/assets/images/extend_linux_battery_life-battery_bench_before_tunning.png" title="Gnome Battery Bench - Before Tunning"&gt;&lt;/p&gt;
&lt;p&gt;First, run &lt;code&gt;powertop&lt;/code&gt; to find out which devices/processes are draining power the most.
In The &lt;code&gt;Overview Tab&lt;/code&gt; you can actually see what processes/devices are draining
how much power and By applying the Good option in &lt;code&gt;Tunables Tab&lt;/code&gt;, powertop
automatically tunes them. you can do this manually for every item in Tunable tab
or just use the &lt;code&gt;--auto-tune&lt;/code&gt; option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo powertop --auto-tune
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That single command will probably add a noticeable extra minutes to your battery
life. But there are still other ways to improve it more. Let's Go to powertop's
&lt;code&gt;Overview Tab&lt;/code&gt; again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Power est.  Usage        Events/s    Category    Description
  5.18 W    0.4 pkts/s               Device      Network interface: wlp2s0 (wl)
  3.80 W    100.0%                   Device      Display backlight
  1.26 W    165.5 ms/s   123.3       Process     /usr/share/atom/atom --type=zygote --no-sandbox
  675 mW    95.9 ms/s    5.3         Process     atom
  660 mW    94.0%                    Device      USB device: USB2.0-CRW (Generic)
  262 mW    27.0 ms/s    90.1        Process     /usr/share/atom/atom --executed-from=/home/bijan --pid=1109
  247 mW    27.2 ms/s    70.4        Process     /usr/lib/xorg-server/Xorg :0 -seat seat0 -auth /run/lightdm/root/:0 -nolisten tc
  103 mW    2.0 ms/s     109.7        kWork      od_dbs_timer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;According to above, after my wireless interface (which i use), the display backlight,
USB CD-RW and my Ethernet interface are the most draining power sources.
The last two I never/rarely use.&lt;/p&gt;
&lt;h3&gt;Turning Off unnecessary devices&lt;/h3&gt;
&lt;p&gt;Since I never/rarely use my CD-RW and I never connect to Internet through wired
connection, so it seems logical to me to disable them. to find my CD-RW device
power location, I used powertop &lt;code&gt;Tunable Tab&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Disable CR-RW
$ echo 0 | s tee /sys/bus/usb/devices/1-1.3/power/autosuspend_delay_ms
$ echo auto | s tee /sys/bus/usb/devices/1-1.3/power/control
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To disable my Ethernet device, first I have to find it's device number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Find Ethernet domain:bus:slot number
$ lspci | grep -i ethernet
03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 10)

# Find relative device on /sys/devices
$ find /sys/devices -name &amp;quot;*03:00.0&amp;quot;
/sys/devices/pci0000:00/0000:00:02.4/0000:03:00.0

# Turn off device
echo 1 | s tee /sys/devices/pci0000:00/0000:00:02.4/0000:03:00.0/remove
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Backlight&lt;/h3&gt;
&lt;p&gt;To reduce the brightness LED backlight, I set a brightness value (between 0 and 255):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="x"&gt; Brightness&lt;/span&gt;
&lt;span class="x"&gt;basedir=&amp;quot;/sys/class/backlight/&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;handler=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="err"&gt;ls&lt;/span&gt; &lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;basedir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;

&lt;span class="x"&gt;chmod 666 &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;handler&lt;/span&gt;&lt;span class="x"&gt;/brightness&lt;/span&gt;
&lt;span class="x"&gt;echo 100 &amp;gt; handler/brightness&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Running as a Service&lt;/h1&gt;
&lt;p&gt;To execute the above commands at boot up, I created a shell script and run that
as a service.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# /usr/local/bin/powertop_tuning.sh&lt;/span&gt;

&lt;span class="c1"&gt;# Auto-tune powertop&lt;/span&gt;
powertop --auto-tune

&lt;span class="c1"&gt;# Disable CR-RW&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; s tee /sys/bus/usb/devices/1-1.3/power/autosuspend_delay_ms
&lt;span class="nb"&gt;echo&lt;/span&gt; auto &lt;span class="p"&gt;|&lt;/span&gt; s tee /sys/bus/usb/devices/1-1.3/power/control

&lt;span class="c1"&gt;# Disable Ethernet&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; s tee /sys/devices/pci0000:00/0000:00:02.4/0000:03:00.0/remove

&lt;span class="c1"&gt;# Brightness&lt;/span&gt;
chmod &lt;span class="m"&gt;666&lt;/span&gt; /sys/class/backlight/radeon_bl0/brightness
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt; &amp;gt; /sys/class/backlight/radeon_bl0/brightness
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;And to create proper systemd service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# /etc/systemd/system/powertop_tuning.service
[Unit]
Description=&amp;quot;PowerTop Tuning config&amp;quot;
ConditionPathExists=/usr/local/bin/powertop_tuning.sh

[Service]
Type=oneshot
RemainAfterExit=yes
KillMode=none
ExecStart=/usr/local/bin/powertop_tuning.sh
ExecStop=exit

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, to make &lt;code&gt;powertop_tuning&lt;/code&gt; service run automatically, just enable the service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; powertop_tuning.service
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The result is very satisfactory. In daily usage, my battery life went up
from about 3 hours to almost 4 and a half hours.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gnome Battery Bench" src="http://bijanebrahimi.github.io/blog/assets/images/extend_linux_battery_life-battery_bench_after_tunning.png" title="Gnome Battery Bench - After Tunning"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: The tests and battery benchmark did not placed in a controlled
environment but it seems logical to expect similar effects.&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="linux"></category><category term="powertop"></category><category term="power"></category></entry><entry><title>Multiseat Linux Desktop, Multiple X servers</title><link href="http://bijanebrahimi.github.io/blog/multiseat-linux-desktop-multiple-x-servers.html" rel="alternate"></link><published>2014-10-22T10:35:00+03:30</published><updated>2014-10-22T10:35:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2014-10-22:/blog/multiseat-linux-desktop-multiple-x-servers.html</id><summary type="html">&lt;p&gt;This is the first solution in the main Article &lt;a href="{filename}/multiseat-linux-desktop.md"&gt;Multiseat Linux Desktop&lt;/a&gt;. you may also find other solutions for multiseat configuration in there as well.&lt;/p&gt;
&lt;h3&gt;Hardware Requirements&lt;/h3&gt;
&lt;p&gt;for each user, we need seperate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mouse&lt;/li&gt;
&lt;li&gt;keyboard&lt;/li&gt;
&lt;li&gt;monitor&lt;/li&gt;
&lt;li&gt;Video Card&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each Monitor will be attached to a seperate Video Card.&lt;/p&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is the first solution in the main Article &lt;a href="{filename}/multiseat-linux-desktop.md"&gt;Multiseat Linux Desktop&lt;/a&gt;. you may also find other solutions for multiseat configuration in there as well.&lt;/p&gt;
&lt;h3&gt;Hardware Requirements&lt;/h3&gt;
&lt;p&gt;for each user, we need seperate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mouse&lt;/li&gt;
&lt;li&gt;keyboard&lt;/li&gt;
&lt;li&gt;monitor&lt;/li&gt;
&lt;li&gt;Video Card&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each Monitor will be attached to a seperate Video Card.&lt;/p&gt;
&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;the &lt;a href="https://en.wikipedia.org/wiki/X_Window_System"&gt;X Window System&lt;/a&gt; is a system program which implements the hardware layer and the basis for graphical user interfaces (GUIs). to run seperate Desktop Environment in linux, we need to run seperate X servers as well. each X server will use separate Video card, Mouse and Keyboard (input devices). for that we have to configure the X server to do that. but first we have to identify the devices we have plugged to the computer to address them later in the X configuration file.
&lt;!-- BREAK --&gt;&lt;/p&gt;
&lt;h3&gt;Hardware Detection&lt;/h3&gt;
&lt;p&gt;we can find our input devices (Mouse &amp;amp; Keyboards) in &lt;code&gt;/dev/input&lt;/code&gt; directory. lets look to see what have we here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -la /dev/input
drwxr-xr-x  &lt;span class="m"&gt;4&lt;/span&gt; root root    &lt;span class="m"&gt;320&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 .
drwxr-xr-x &lt;span class="m"&gt;15&lt;/span&gt; root root   &lt;span class="m"&gt;3060&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:59 ..
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; root root    &lt;span class="m"&gt;160&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 by-id
drwxr-xr-x  &lt;span class="m"&gt;2&lt;/span&gt; root root    &lt;span class="m"&gt;220&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 by-path
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;64&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event0
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;65&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event1
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;66&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event2
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;67&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event3
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;68&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event4
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;69&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event5
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;70&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event6
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;71&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event7
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;72&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 event8
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;63&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 mice
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;32&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 mouse0
crw-------  &lt;span class="m"&gt;1&lt;/span&gt; root root 13, &lt;span class="m"&gt;33&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 mouse1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;before explaining what is each of these files and directories, first we have to look at their permissions. they belogs to root user and group. so for reading them, we have to have read permission. run the below commands as super user or just run them using the &lt;code&gt;sudo&lt;/code&gt; command which i did.&lt;/p&gt;
&lt;p&gt;each &lt;code&gt;/dev/input/event*&lt;/code&gt; file is an input device file. to find out which one is related to which input device we can print the files and see if it contains output when we move our mouse or press a key. so i did run the command and played with my input devices to see which one is which.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo cat /dev/input/event0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;do this till you find all of your input devices.&lt;/p&gt;
&lt;p&gt;an alternative way (which i preffer) is to look into &lt;code&gt;/dev/input/by-id/&lt;/code&gt; directory. your Input devices should be listed there with their human readable names.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls -la /dev/input/by-id/
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; root root &lt;span class="m"&gt;160&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 .
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; root root &lt;span class="m"&gt;160&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 .
drwxr-xr-x &lt;span class="m"&gt;4&lt;/span&gt; root root &lt;span class="m"&gt;320&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 ..
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-15ca_USB_Optical_Mouse-event-mouse -&amp;gt; ../event2
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-15ca_USB_Optical_Mouse-mouse -&amp;gt; ../mouse0
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-CHICONY_USB_Keyboard-event-if01 -&amp;gt; ../event4
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-CHICONY_USB_Keyboard-event-kbd -&amp;gt; ../event3
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-Logitech_Logitech_USB_Keyboard-event-if01 -&amp;gt; ../event1
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root   &lt;span class="m"&gt;9&lt;/span&gt; Apr &lt;span class="m"&gt;23&lt;/span&gt; 09:57 usb-Logitech_Logitech_USB_Keyboard-event-kbd -&amp;gt; ../event0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;since you may notice, there may be a lot more input devices there. that's because linux will create several input device files for devices like Keyboards which have fancy buttons. try the old &lt;code&gt;cat&lt;/code&gt; command to find out which one is your proper device driver file. i did it this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo cat /dev/input/by-id/usb-15ca_USB_Optical_Mouse-event-mouse
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;write your input device names with their related device file name somewhere cause we're going to need those later.&lt;/p&gt;
&lt;p&gt;at last for Video Cards. Video cards are identified by their address on the PCI bus. so to find them we can use &lt;code&gt;lspci&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ lspci &lt;span class="p"&gt;|&lt;/span&gt;  grep VGA
00:09.0 VGA compatible controller: nVidia Corporation NV18 &lt;span class="o"&gt;[&lt;/span&gt;GeForce4 MX &lt;span class="m"&gt;4000&lt;/span&gt; AGP 8x&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;rev c1&lt;span class="o"&gt;)&lt;/span&gt;
00:0a.0 VGA compatible controller: nVidia Corporation NV18 &lt;span class="o"&gt;[&lt;/span&gt;GeForce4 MX &lt;span class="m"&gt;4000&lt;/span&gt; AGP 8x&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;rev c1&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this command lists the pci devices connected to the computer and filters the lines containing VGA. the number on the left is the device PCI address. now we have the table below for our multiseat configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Seat number one&lt;/li&gt;
&lt;li&gt;mouse: /dev/input/event2&lt;/li&gt;
&lt;li&gt;keyboard: /dev/input/event0&lt;/li&gt;
&lt;li&gt;Video Card: 00:09.0&lt;/li&gt;
&lt;li&gt;Seat number two&lt;/li&gt;
&lt;li&gt;mouse: /dev/input/event8&lt;/li&gt;
&lt;li&gt;keyboard: /dev/input/event3&lt;/li&gt;
&lt;li&gt;Video Card: /dev/input/event8&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;X Configuration&lt;/h3&gt;
&lt;p&gt;the X keeps it's configuration file in &lt;code&gt;/etc/X11&lt;/code&gt; directory. we can directly modify it's current configuration file &lt;code&gt;xorg.conf&lt;/code&gt; or we can simply create an alternative configuration file and tell X to read from it manually. that will help us to run X with default configurations if our configuration somehow didn't work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo touch /etc/X11/xorg.conf.multiseat
$ sudo nano xorg.conf.multiseat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First of all, we need to set &lt;a href="https://wiki.archlinux.org/index.php/Xorg_multiseat#The_basics"&gt;basic Xorg configuration&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Section &amp;quot;ServerFlags&amp;quot;
    Option &amp;quot;AutoAddDevices&amp;quot;     &amp;quot;false&amp;quot;
    Option &amp;quot;AutoEnableDevices&amp;quot;  &amp;quot;false&amp;quot;
    Option &amp;quot;AllowMouseOpenFail&amp;quot; &amp;quot;on&amp;quot;
    Option &amp;quot;AllowEmptyInput&amp;quot; &amp;quot;on&amp;quot;
    Option &amp;quot;ZapWarning&amp;quot;         &amp;quot;on&amp;quot;
    Option &amp;quot;HandleSpecialKeys&amp;quot;  &amp;quot;off&amp;quot; # Zapping on
    Option &amp;quot;DRI2&amp;quot; &amp;quot;on&amp;quot;
    Option &amp;quot;Xinerama&amp;quot; &amp;quot;off&amp;quot;
EndSection
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;after that we need to define input devices, screens, monitors and layouts. do the following configuration for each seat you want to have. so first we need to define out input devices. look at the "Option Device". it is the device file name we detect earlier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Section &amp;quot;InputDevice&amp;quot;
    Identifier      &amp;quot;Keyboard0&amp;quot;
    Driver          &amp;quot;evdev&amp;quot;
    Option          &amp;quot;Device&amp;quot;                &amp;quot;/dev/input/event0&amp;quot;
    Option &amp;quot;xkb_rules&amp;quot; &amp;quot;evdev&amp;quot;
    Option &amp;quot;xkb_model&amp;quot; &amp;quot;evdev&amp;quot;
    Option &amp;quot;xkb_layout&amp;quot; &amp;quot;us&amp;quot;
    Option &amp;quot;GrabDevice&amp;quot; &amp;quot;on&amp;quot; # prevent send event to other X-servers
EndSection
Section &amp;quot;InputDevice&amp;quot;
    Identifier &amp;quot;Mouse0&amp;quot;
    Driver &amp;quot;evdev&amp;quot;
    Option &amp;quot;Device&amp;quot; &amp;quot;/dev/input/event2&amp;quot;
    Option &amp;quot;GrabDevice&amp;quot; &amp;quot;on&amp;quot;
EndSection
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now we need to define Screen with uses Monitor and Device which is our Video Card (you can tweak the Modes and ... if you like). the BusId Option is the PCI address we also found earlier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Section &amp;quot;Device&amp;quot;
    Identifier      &amp;quot;Nvidia0&amp;quot;
    Driver          &amp;quot;nouveau&amp;quot;
    BusId           &amp;quot;PCI:00:09.0&amp;quot;
EndSection
    Section &amp;quot;Monitor&amp;quot;
    Identifier      &amp;quot;Lg0&amp;quot;
    HorizSync       30-93
    VertRefresh     60
    Option          &amp;quot;dpms&amp;quot;
EndSection
Section &amp;quot;Screen&amp;quot;
    Identifier              &amp;quot;Screen0&amp;quot;
    Device                  &amp;quot;Nvidia0&amp;quot;
    Monitor                 &amp;quot;Lg0&amp;quot;
    DefaultDepth    24
    Option                  &amp;quot;DPI&amp;quot;   &amp;quot;100x100&amp;quot;
    Subsection &amp;quot;Display&amp;quot;
        Depth   24
        Modes   &amp;quot;1280x1024&amp;quot;     &amp;quot;1024x768&amp;quot;
    EndSubsection
EndSection
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and finally, we need to define a Layout which we will later tell X to load it. it simply gathers the defined input devices and Screens.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Section &amp;quot;ServerLayout&amp;quot;
    Identifier      &amp;quot;Seat0&amp;quot;
    Screen          1               &amp;quot;Screen0&amp;quot;       1                   1
    InputDevice     &amp;quot;Mouse0&amp;quot;        &amp;quot;CorePointer&amp;quot;
    InputDevice     &amp;quot;keyboard0&amp;quot;      &amp;quot;CoreKeyboard&amp;quot;
    Option &amp;quot;Clone&amp;quot; &amp;quot;off&amp;quot;
    Option &amp;quot;AutoAddDevices&amp;quot; &amp;quot;off&amp;quot;
    Option &amp;quot;DisableModInDev&amp;quot; &amp;quot;true&amp;quot;
    Option &amp;quot;SingleCard&amp;quot; &amp;quot;on&amp;quot;   # use this to simplfied isolatedevice option
EndSection
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that's it. do this process again for the next seats and then you're done.&lt;/p&gt;
&lt;h3&gt;Test The Configuration&lt;/h3&gt;
&lt;p&gt;to test if everything is OK, we can run X using our multiseat configuration file and defined Layout. so we need to tell X where to look for COnfiguration file and load Which layout.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ startx -- :1 -layout Seat0 -config xorg.conf.multiseat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the above code, i used &lt;code&gt;startx&lt;/code&gt;. it is a front-end script to xinit. you can also simply run the X directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ X -novtswitch -sharevts -nolisten tcp -config xorg.conf.multiseat -layout Seat0 :1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you may need to go to the 7th console to use it (CTRL+F7) as the second seat will be available on the 8th console and so on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ startx -- :2 -layout Seat0 -config xorg.conf.multiseat
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if anything happend,read the log files and search the web.&lt;/p&gt;
&lt;h3&gt;Configure Display Managers&lt;/h3&gt;
&lt;p&gt;it is possible to configure your Display Manager (like KDM or GDM) to behave properly with Multiseat configuration at boot-up, but since i dont use any Display Manager, i can not tell you exactly how to do it. search the web for that matter. you can do it the easy way by configuring your Display Manager rc file or the hard way by editing the &lt;code&gt;/etc/inittab&lt;/code&gt; file if you have systemV.&lt;/p&gt;</content><category term="X11"></category><category term="config"></category><category term="xephyr"></category></entry><entry><title>Multiseat Linux Desktop</title><link href="http://bijanebrahimi.github.io/blog/multiseat-linux-desktop.html" rel="alternate"></link><published>2014-10-21T10:35:00+03:30</published><updated>2014-10-21T10:35:00+03:30</updated><author><name>Bijan</name></author><id>tag:bijanebrahimi.github.io,2014-10-21:/blog/multiseat-linux-desktop.html</id><summary type="html">&lt;p&gt;here is the story. my 3 years old nephew (which i love him so much) is so curious about computers. every time he comes to visit (which is not rarely), he insist on helping me with my computer works. of course he thinks he is helping but i can't have …&lt;/p&gt;</summary><content type="html">&lt;p&gt;here is the story. my 3 years old nephew (which i love him so much) is so curious about computers. every time he comes to visit (which is not rarely), he insist on helping me with my computer works. of course he thinks he is helping but i can't have him messing my projects. so i wondered if i can (peacefully) share the computer with him. i searched and i found out about &lt;a href="en.wikipedia.org/wiki/Multiseat_configuration"&gt;Multiseat&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A multiseat, multi-station or multiterminal configuration is a single computer which supports
multiple independent local users at the same time. In modern usage the terms refer to multiple
users using one personal computer, each with their own console, consisting of a keyboard a mouse,
a monitor, and possibly headphones --Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;so obviously that was the solution. time to get my hands dirty on the code :)&lt;/p&gt;
&lt;h3&gt;GNU/Linux Solutions&lt;/h3&gt;
&lt;p&gt;as it may be obvious, there are numbers of solution to do configure the GNU/Linux system to fit my need. so, in the following next articles (below links), i will explain these solution as i experienced them. i try to do them separately and independently, so you can skip ones you are not interested about. here are what i found:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="{filename}/multiseat-linux-desktop-multiple-x-servers.md"&gt;Multiple X servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nested X servers (i will write about it very soon)&lt;/li&gt;
&lt;li&gt;The Multi-seat display manager&lt;/li&gt;
&lt;/ol&gt;</content><category term="X11"></category><category term="config"></category></entry></feed>